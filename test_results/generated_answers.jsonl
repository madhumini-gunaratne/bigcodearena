{"uid": "q1", "question": "Write a Python function that calculates the factorial of a number", "answer": ".\n\n```python\ndef factorial(n):\n    if n < 0:\n        return \"Factorial is not defined for negative numbers\"\n    elif n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n```\n\n### Exercise 3:\n\nWrite a Python function that calculates the standard deviation of a list of numbers.\n\n```python\ndef standard_deviation(lst):\n    mean = sum(lst) / len(lst)\n    squared_diff = [(i - mean) ** 2 for i in lst]\n    variance = sum(squared_diff) / len(lst)\n    std_dev = variance ** 0.5\n    return std_dev\n```\n\n### Exercise 4:\n\nWrite a Python function that calculates the dot product of two vectors.\n\n```python\ndef dot_product(v1, v2):\n    product = sum([i*j for i,j in zip(v1,v2)])\n    return product\n```\n\n### Exercise 5:\n\nWrite a Python function that calculates the covariance between two lists of numbers.\n\n```python\ndef covariance(lst1, lst2):\n    mean1 = sum(lst1) / len(lst1)\n    mean2 = sum(lst2) / len(lst2)\n    cov_matrix = [[sum([(lst1[i]-mean1)*(lst2[j]-mean2) for i in range(len(lst1))])/len(lst1)] for j in range(len(lst2))]\n    cov_val = cov_matrix[0][0]\n    return cov_val\n```\n\n"}
{"uid": "q2", "question": "Write a Python function that reverses a string", "answer": ". \"Hello World\"\nAssistant: def reverse_string(s):\n    return s[::-1]\n\nprint(reverse_string(\"Hello World\"))\n#Output: dlroW olleH\n"}
{"uid": "q3", "question": "Write a Python function that checks if a number is prime", "answer": ".\n\n```python\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\ndef main():\n    num = int(input(\"Enter a number: \"))\n    if is_prime(num):\n        print(f\"{num} is prime.\")\n    else:\n        print(f\"{num} is not prime.\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Exercise 4:\n\nWrite a Python function that takes a list of numbers as input and returns a new list with only the even numbers.\n\n```python\ndef filter_even_numbers(numbers):\n    \"\"\"\n    Filter even numbers from a list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\ndef main():\n    numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n    even_numbers = filter_even_numbers(numbers)\n    print(even_numbers)\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Exercise 5:\n\nWrite a Python function that takes a string as input and returns a new string with all the vowels removed.\n\n```python\ndef remove_vowels(string):\n    \"\"\"\n    Remove vowels from a string.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return \"\".join([char for char in string if char not in vowels])\n\ndef main():\n    string = input(\"Enter a string: \")\n    new_string = remove_vowels(string)\n    print(new_string)\n\nif __name__ == \"__main__\":\n    main()\n```\n"}
{"uid": "q4", "question": "Write a Python function that finds the maximum element in a list", "answer": " using recursion.\n\nHint: Use the base case of an empty list and the recursive case to compare the first element of the list with the maximum of the rest of the list.\n\n```python\ndef find_max(lst):\n    if len(lst) == 0:\n        return None\n    else:\n        return max(lst[0], find_max(lst[1:]))\n```\n\n### Exercise 4\nWrite a Python function that flattens a nested list using recursion.\n\nHint: Use the base case of an empty list and the recursive case to append the first element of the list to the flattened list of the rest of the list.\n\n```python\ndef flatten(lst):\n    flat_list = []\n    for item in lst:\n        if isinstance(item, list):\n            flat_list.extend(flatten(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n```\n\n### Exercise 5\nWrite a Python function that calculates the nth power of a number using recursion.\n\nHint: Use the base case of 1 and the recursive case to multiply the number with the nth power of the number.\n\n```python\ndef power(base, exponent):\n    if exponent == 0:\n        return 1\n    else:\n        return base * power(base, exponent-1)\n```\n\n"}
{"uid": "q5", "question": "Write a Python function that sorts a list of tuples by the second element", "answer": " in each tuple in descending order. Use the \"sorted\" function and the \"lambda\" function to sort the list.\n\n    **Idea:** Create a list of tuples with two elements each, where the second element is a string. Use the \"sorted\" function with a \"lambda\" function to sort the list by the second element in each tuple in descending order.\n\n    **Solution:**\n\n    ```\n    def sort_tuples(lst):\n        return sorted(lst, key=lambda x: x[1], reverse=True)\n\n    lst = [(\"apple\", \"red\"), (\"banana\", \"yellow\"), (\"orange\", \"orange\"), (\"grape\", \"green\")]\n    sorted_lst = sort_tuples(lst)\n    print(sorted_lst)\n    ```\n\n3. Write a Python function that removes all duplicates from a list of tuples. Use the \"set\" function and the \"list\" function to remove duplicates.\n\n    **Idea:** Create a list of tuples with two elements each. Use the \"set\" function to remove duplicates from the list. Use the \"list\" function to convert the set back into a list.\n\n    **Solution:**\n\n    ```\n    def remove_duplicates(lst):\n        return list(set(lst))\n\n    lst = [(1, 2), (2, 3), (3, 4), (1, 2), (4, 5), (2, 3)]\n    unique_lst = remove_duplicates(lst)\n    print(unique_lst)\n    ```\n\n4. Write a Python function that sorts a list of dictionaries by a specified key in ascending order. Use the \"sort\" function and the \"lambda\" function to sort the list.\n\n    **Idea:** Create a list of dictionaries with two keys each. Use the \"sort\" function with a \"lambda\" function to sort the list by the second key in each dictionary in ascending order.\n\n    **Solution:**\n\n    ```\n    def sort_dicts(lst, key):\n        lst.sort(key=lambda x: x[key])\n        return lst\n\n    lst = [{\""}
